name: ci

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build-and-test:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}"

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        os: [ubuntu-latest]

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v1"
        with:
            python-version: "${{ matrix.python-version }}"
      - name: Install dependencies
        run: |
          set -xe
          pip install --upgrade pip setuptools wheel
          pip install flake8 pytest-xdist pytype pylint pylint-exit
          pip install -r requirements/requirements.txt
          pip install -r requirements/requirements-test.txt
        shell: bash
      - name: Lint with flake8
        run: |
          set -xe
          flake8 `find rlax -name '*.py' | xargs` --count --select=E9,F63,F7,F82,E225,E251 --show-source --statistics
      - name: Lint with pylint
        run: |
          set -xe
          # Fail on errors, warning, conventions and refactoring messages.
          PYLINT_ARGS="-efail -wfail -cfail -rfail"

          # Lint modules and tests separately.
          pylint --rcfile=.pylintrc `find rlax -name '*.py' | grep -v 'test.py' | xargs` || pylint-exit $PYLINT_ARGS $?

          # Disable `protected-access` warnings for tests.
          pylint --rcfile=.pylintrc `find rlax -name '*_test.py' | xargs` -d W0212 || pylint-exit $PYLINT_ARGS $?
      - name: Build
        run: |
          set -xe
          python -VV
          python setup.py sdist
          pip wheel --verbose --no-deps --no-clean dist/rlax*.tar.gz
          pip install rlax*.whl
        shell: bash
      - name: Check types with pytype
        run: |
          set -xe
          pytype --version
          pytype `find rlax/_src/ -name "*py" | xargs` -k
        shell: bash
      - name: Run tests
        run: |
          set -xe
          # Change directory to avoid importing the package from repo root.
          mkdir _testing && cd _testing

          # Main tests.
          pytest -n "$(grep -c ^processor /proc/cpuinfo)" --pyargs rlax -k "not pop_art_test"

          # Isolate tests that use `chex.set_n_cpu_device()`.
          pytest -n "$(grep -c ^processor /proc/cpuinfo)" --pyargs rlax -k "pop_art_test"

          cd ..
        shell: bash
